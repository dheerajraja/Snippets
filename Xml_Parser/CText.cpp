/* Generated by Together */

#include "CText.h"
#include <iomanip>		// Header für die Standard-IO-Objekte (z.B. cout, cin)/*#include <stdlib.h> //
 #include <string> // for string datatype,
 using namespace std;*/
CText::CText() :
		CNode(TEXT) // initializing parent class node type through parameter initialization list
{

}

string CText::getText()
{
	return m_text;
}
void CText::setText(string text)
{
	m_text = text;
}
bool CText::parseInput(const string& Input, unsigned& parsePosition)
{
	string::const_iterator it1; // utilizing the string iterator in the string class to iterate through the strinng

	it1 = Input.begin(); // intializing iterator to the start of the string

	if (it1[parsePosition] != '<') //this check makes sure that we have a string within the element
	{

		while (it1[parsePosition] != '<') // reading all the characters in the string until the end of the element is encountered
		{

			m_text = m_text + it1[parsePosition];
			parsePosition++; // updating parseposition

		}

		return true;
	}
	else
	{
		return false;
	}

}
void CText::print(int indent)
{
	int count = indent; // indenting the text data with right no. of positions
	while (count != 0)
	{
		cout << " ";
		count--;
	}

	cout << "CText" << "[m_text=" << m_text << "]" << endl;
}
node_t CText::getNodeType()
{
	return CNode::getNodeType(); // returning node type stored in parent class
}
