/* Generated by Together */

#ifndef CTEXT_H
#define CTEXT_H
#include "CNode.h"
/**
 * This class contains the text type data and the methods required store
 * the text type node in a XML data format
 */
class CText: public CNode
{
public:
	/**
	 * Constructor that initializes member variables and the node type to TEXT
	 * of the parent class CNode
	 */
	CText();

	/**
	 * Gets the text data of an element i.e. stored.
	 * @param: None
	 * @Return: the text data within an element is returned.
	 */
	string getText();

	/**
	 * Sets the text data of an element to that passed by the user or the
	 * element.
	 * @Param: text: user text data used to set the text within the XML parser
	 * datastructure
	 * @return: None
	 */
	void setText(string text);

	/**
	 * This method consumes all characters up to (but not including) an '<'.
	 * The consumed characters are stored in attribute m_text.
	 * @param: Input: contains the input XML parser string data.
	 * @param: parsePosition:Current position from which the XML data (string)
	 *  has to be parsed.
	 * @Return: True is returned upon successful text parsing and if not a false
	 * is returned indicating parsing error.
	 */
	bool parseInput(const string& Input, unsigned& parsePosition);

	/**
	 * This method is used to print the text belonging to a particular element
	 * with the right indent
	 * element.
	 * @Param: indent: provides the no. of times the text data has to be indented
	 * for the right display format.
	 * @return: None
	 */
	void print(int indent);

	/**
	 *This method returns the node type by obtaining the node type from the parent
	 *This class CNode using getNodeType()  of the parent class CNode
	 * @Param: None
	 * @return: Node type that indicates whether it is element type or text type.
	 */
	node_t getNodeType();

private:
	/**
	 * The attribute that stores the text node type in a XML data format.
	 */

	string m_text;
};
#endif //CTEXT_H
