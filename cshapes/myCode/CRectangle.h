/* Generated by Together */

#ifndef CRECTANGLE_H
#define CRECTANGLE_H

#include <string>
using namespace std;

#include "CGraphicElement.h"

namespace GraSys
{

template<class T>
class CRectangle: public CGraphicElement<T>
{

protected:
	/**
	 * Retrives the type of the element in the string format
	 * This si delegated by the parent for implemetation by Rectangle
	 * @param:None
	 * @return:string indicating Rectangle
	 */
	virtual string getTypeName();

public:
	//CRectangle(string color);
	/**
	 * @brief: parameterized constructor used to initialize the characteristics of Rectangle.
	 * @Param:color specifies the Rectangle color
	 * @Param:corner1 specifies the Rectangle centre
	 * @Param:radius specifies the Rectangle radius
	 */
	CRectangle(string color, const CCoordinate<T>& corner1,
			const CCoordinate<T>& corner2);

	/**
	 * @brief: virtual destructor that indicates to the compiler that when memory
	 * freeing for parent object is done even child class object memory is freed.
	 * @Param:none
	 */
	virtual ~CRectangle();
};

/*CRectangle::CRectangle(string color) : CGraphicElement("Rectangle", 2, color)
 {
 }*/

template<class T>
CRectangle<T>::CRectangle(string color, const CCoordinate<T>& corner1,
		const CCoordinate<T>& corner2) :
		CGraphicElement<T>("Rectangle", 2, color)
{
	this->m_coordinates.push_back(corner1);
	this->m_coordinates.push_back(corner2);

}

template<class T>
string CRectangle<T>::getTypeName()
{
	return "Rectangle";
}

template<class T>
CRectangle<T>::~CRectangle()
{

}

}
#endif //CRECTANGLE_H
