/* Generated by Together */

#ifndef CTRIANGLE_H
#define CTRIANGLE_H

#include <string>
#include <iostream>
using namespace std;

#include "CGraphicElement.h"

namespace GraSys
{

template<class T>
class CTriangle: public CGraphicElement<T>
{

public:
	//CTriangle (string color);
	/**
	 * @brief: parameterized constructor used to initialize the characteristics of Triangle.
	 * @Param:color specifies the Triangle color
	 * @Param:corner1 specifies the Triangle centre
	 * @Param:radius specifies the Triangle radius
	 */
	CTriangle(string color, const CCoordinate<T>& corner1,
			const CCoordinate<T>& corner2, const CCoordinate<T>& corner3);

	/**
	 * @brief: virtual destructor that indicates to the compiler that when memory
	 * freeing for parent object is done even child class object memory is freed.
	 * @Param:none
	 */
	virtual ~CTriangle();

protected:
	/**
	 * Retrives the type of the element in the string format
	 * This si delegated by the parent for implemetation by Triangle
	 * @param:None
	 * @return:string indicating Triangle
	 */
	virtual string getTypeName();

};

/*CTriangle::CTriangle(string color) : CGraphicElement("Triangle", 3, color) {
 }*/
template<class T>
CTriangle<T>::CTriangle(string color, const CCoordinate<T>& corner1,
		const CCoordinate<T>& corner2, const CCoordinate<T>& corner3) :
		CGraphicElement<T>("Triangle", 3, color)
{
	this->m_coordinates.push_back(corner1);
	this->m_coordinates.push_back(corner2);
	this->m_coordinates.push_back(corner3);
}

template<class T>
string CTriangle<T>::getTypeName()
{
	return "Triangle";
}

template<class T>
CTriangle<T>::~CTriangle()
{

}
}
#endif //CTRIANGLE_H
